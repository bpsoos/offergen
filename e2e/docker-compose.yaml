services:
  tester:
    image: mcr.microsoft.com/playwright:v1.50.0-noble
    entrypoint: /bin/bash -c 'exit 0'
    working_dir: /test-suites
    ports:
      - "9323:9323"
    volumes: 
      - ./e2e/suites:/test-suites
    depends_on:
      reverse-proxy:
        condition: service_started

  offergen:
    image: "offergen-tester-image"
    entrypoint: "air -c .air.toml"
    environment:
      AUTH_BASE_URL: http://hanko:8000
      AUTH__COOKIE_NAME: offergen__auth
      AUTH__FLOW_COOKIE__NAME: offergen__auth_flow
      AUTH__FLOW_COOKIE__PATH: /auth
      AUTH__FLOW_COOKIE__DOMAIN: ""
      AUTH__FLOW_COOKIE__IS_SECURE: false
      HTTP_CLIENT__READ_TIMEOUT: 1s
      HTTP_CLIENT__WRITE_TIMEOUT: 1s
      HTTP_CLIENT__MAX_IDLE_CONN_DURATION: 1m
      HTTP_CLIENT__MAX_CONN_DURATION: 1m
      HTTP_CLIENT__HANKO_TIMEOUTS__INIT_REGISTRATION_FLOW: 300ms
      HTTP_CLIENT__HANKO_TIMEOUTS__REGISTER_CLIENT_CAPABILITIES_FOR_REGISTER: 300ms
      HTTP_CLIENT__HANKO_TIMEOUTS__REGISTER_LOGIN_IDENTIFIER: 10s
      HTTP_CLIENT__HANKO_TIMEOUTS__VERIFY_PASSCODE: 1s
      HTTP_CLIENT__HANKO_TIMEOUTS__INIT_LOGIN_FLOW: 600ms
      HTTP_CLIENT__HANKO_TIMEOUTS__REGISTER_CLIENT_CAPABILITIES_FOR_LOGIN: 600ms
      HTTP_CLIENT__HANKO_TIMEOUTS__CONTINUE_WITH_LOGIN_IDENTIFIER: 5s
      DEV_PASSWORD: testpassword
      RATE_LIMITER_ENABLED: false
      POSTGRES_URL: "postgres://testuser:testpassword@offergen-postgres:5432/testdb?sslmode=disable"
      STYLES_MAX_AGE_SECONDS: 0
      MEDIA_MAX_AGE_SECONDS: 0
    volumes:
      - "./offergen:/source"
    healthcheck:
      test: "curl -Sf 0.0.0.0/health"
      interval: 5s
      timeout: 1s
      retries: 60
      start_period: 1s
    depends_on:
      offergen-migrator:
        condition: service_completed_successfully
      hanko-health:
        condition: service_healthy
  offergen-postgres:
    image: postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
    volumes:
      - "./e2e/example_data:/example_data"
    healthcheck:
      test: "pg_isready -d testdb -U testuser"
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 1s
  offergen-migrator:
    image: "offergen-tester-image"
    command: run main.go migrate
    environment:
      POSTGRES_URL: "postgres://testuser:testpassword@offergen-postgres:5432/testdb?sslmode=disable"
    volumes:
      - "./offergen:/source"
    depends_on:
      offergen-postgres:
        condition: service_healthy
  offergen-testdata:
    image: postgres
    entrypoint: psql
    command:
      - postgres://testuser:testpassword@offergen-postgres:5432/testdb?sslmode=disable
      - -f
      - /example_data/tables.sql
    volumes:
      - "./e2e/example_data:/example_data"
    depends_on:
      offergen-migrator:
        condition: service_completed_successfully

  reverse-proxy:
    image: nginx
    volumes:
      - ./e2e/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 8082:80
    depends_on:
      offergen:
        condition: service_healthy

  hanko-postgres:
    image: postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
    healthcheck:
      test: "pg_isready -d testdb -U testuser"
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 1s
  hanko-importer:
    image: ghcr.io/teamhanko/hanko:v1.0.2
    command: user import -i /example_data/users.json
    depends_on:
      hanko-migrator:
        condition: service_completed_successfully
    volumes:
      - "./e2e/hanko_config.yaml:/config/config.yaml"
      - "./e2e/example_data:/example_data"
  hanko:
    image: ghcr.io/teamhanko/hanko:v1.0.2
    command: serve all
    volumes:
      - "./e2e/hanko_config.yaml:/config/config.yaml"
    depends_on:
      smtp:
        condition: service_started
      hanko-migrator:
        condition: service_completed_successfully
  hanko-migrator:
    image: ghcr.io/teamhanko/hanko:v1.0.2
    command: migrate up
    volumes:
      - "./e2e/hanko_config.yaml:/config/config.yaml"
    depends_on:
      hanko-postgres:
        condition: service_healthy
  hanko-health:
    image: alpine/curl
    entrypoint: "sleep"
    command: "infinity"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://hanko:8000/health/alive"]
      interval: 1s
      timeout: 1s
      retries: 30
      start_period: 1s
    depends_on:
      hanko:
        condition: service_started
  smtp:
    image: marcopas/docker-mailslurper:latest
    ports:
      - "8083:8080"
      - "8085:8085"

